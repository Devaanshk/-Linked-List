# DOUBTS---> 
# Q5 and midpoint why we used and


class Node:
    def __init__(self, data) -> None:
        self.data = data
        self.next = None
def takeInput():
    inputList = [int(ele) for ele in input().split()]
    head = None
    tail = None
    for currData in inputList:
        if currData == -1:
            break
        newNode = Node(currData)
        while head is None:
            head = newNode
            tail = newNode
        else:
            tail.next = newNode
            tail = newNode
    return head
def printLL(head):
    temp = head
    while temp is not None:
        print(temp.data)
        temp = temp.next

#Q1.Find a node in a LL -> give index

def findNode(head , n):
    if head is None:
        return -1
    temp = head
    count = 0
    while temp is not None:
        if temp.data == n:
            return count
        count = count + 1
        temp = temp.next
    return -1

# head = takeInput()
# printLL(head)
# print("Element found at index:" ) 
# print(findNode(head,0))

#Q2. Append last N to first

def length(head):
    if head is None:
        return 0
    return 1 + length(head.next)

def appendLastNToFirst(head,n):
    pos = length(head) - n
    count = 0
    temp = head
    prev = None
    curr = head
    if pos <= 0 or n<=0:
        return head

    while count < pos:
        prev = curr
        curr = curr.next
        count = count + 1
    new_head = curr
    while curr.next is not None:
        curr = curr.next
    curr.next = head    
    prev.next = None

    return new_head

# head = takeInput()
# head = appendLastNToFirst(head,3)
# printLL(head)

#Q3. Eliminate Duplicates

def removeDuplicates(head):
    if head is None and head.next is not None:
        return head
    curr=head
    while curr.next is not None:
        if curr.data == curr.next.data:
            curr.next = curr.next.next
        else:
            curr= curr.next
    return head

# head = takeInput()
# head = removeDuplicates(head)
# printLL(head)

#Q4.Print Reversed LL

def printReverse(head):
    if head is None:
        return
    printReverse(head.next)
    print(head.data,end=" ")

# head = takeInput()
# printReverse(head)

#Q5. Palindrome LL
def reverseLinkedList(head):
    prev = None
    current = head
    while current is not None:
        next_node = current.next
        current.next = prev
        prev = current
        current = next_node
    return prev

def isPalindrome(head):
    if head is None or head.next is None:
        return True
    
    # Find midpoint
    slow = head
    fast = head
    while fast.next is not None and fast.next.next is not None:
        slow = slow.next
        fast = fast.next.next
    
    # Reverse the second half of the linked list
    second_half = reverseLinkedList(slow.next)
    
    # Compare the elements of the first half with the reversed second half
    first_half = head
    while second_half is not None:
        if first_half.data != second_half.data:
            return False
        first_half = first_half.next
        second_half = second_half.next
    
    return True

# head = takeInput()
# print(isPalindrome(head))


# Q6.Find Node Recursively
def findNodeRec(head, n,index = 0):
    if head is None:
        return -1
    if head.data == n:
        return index
    return findNodeRec(head.next, n,index = index + 1)

# head = takeInput()
# print(findNodeRec(head,3))

#Q7. Even After Odd LL

def evenAfterOdd(head):
    if head is None:
        return None
    
    odd_head = None
    odd_tail = None
    even_head = None
    even_tail = None

    curr = head
    while curr is not None:
        if curr.data % 2 == 1:
            if odd_head is None:
                odd_head = curr
                odd_tail = curr
            else:
                odd_tail.next = curr
                odd_tail = curr
        else:
            if even_head is None:
                even_head = curr
                even_tail = curr
            else:
                even_tail.next = curr
                even_tail = curr
        curr = curr.next

    if odd_head is None:
        return even_head
    if even_head is None:
        return odd_head

    odd_tail.next = even_head
    even_tail.next = None
    return odd_head      
# head = takeInput()
# head = evenAfterOdd(head)
# printLL(head)

# Q8. You have been given a singly linked list of integers along with
#  two integers, 'M,' and 'N.'
#  Traverse the linked list such that you retain the 'M' nodes,
#  then delete the next 'N' nodes.
#  Continue the same until the end of the linked list. 
# Indexing starts from 1.
# Sample Input 1 :
# 1
# 1 2 3 4 5 6 7 8 -1
# 2 2
# Sample Output 1 :
# 1 2 5 6

# head = takeInput()
# head = skipMdeleteN(head,2,2)
# printLL(head)

#Q9. Swap two Nodes in a LL
# 3 4 5 2 6 1 9 -1
# 3 4
# Sample Output 1 :
# 3 4 5 6 2 1 9 
        
#Q10.Sample Input 1 :
# k-Reverse
# 1
# 1 2 3 4 5 6 7 8 9 10 -1
# 4
# Sample Output 1 :
# 4 3 2 1 8 7 6 5 10 9
